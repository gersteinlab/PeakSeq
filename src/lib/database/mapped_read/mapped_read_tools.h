#ifndef __MAPPED_READ_FILE_INTERFACE__
#define __MAPPED_READ_FILE_INTERFACE__

#include <vector>
using namespace std;

struct t_profile_site;
struct t_fragment;
struct t_frag_end;

// Parse the mapped reads file generated by ELAND and output a mapped reads file (loadable by t_enrichment_profile class)
// for each chromosome.

// Parse the ELAND/SAM/tagAlign formatted mapped tags files and dump the text based read maps. 
// These files are dumped to the output directory in the arguments.
void parse_ELAND_mapped_reads_file(vector<char*>* chr_fps, char* parsed_reads_op_dir, char* eland_fp);
void parse_SAM_formatted_mapped_reads_file(vector<char*>* chr_fps, char* parsed_reads_op_dir, char* sam_fp);
void parse_tagAlign_formatted_mapped_reads_file(vector<char*>* chr_fps, char* parsed_reads_op_dir, char* sam_fp);
void parse_bowtie_formatted_mapped_reads_file(vector<char*>* chr_ids, char* parsed_reads_op_dir, char* bowtie_fp);

// Read the text based mapped reads file from the directory in the arguments, validate them (if requested) then dump the binary 
// based mapped reads.
void validate_dump_binary_files(vector<char*>* chr_ids, char* parsed_reads_op_dir, bool validate);

FILE* get_fragment_file_pointer_by_chr_id(vector<FILE*>* fragment_f_ptrs, vector<char*>* chr_ids, char* chr_id);
FILE* get_fragment_file_pointer_by_chr_file_name(vector<FILE*>* fragment_f_ptrs, vector<char*>* chr_ids, char* chr_fn);

// This is the function that computes the normalized profile, there is no other place where this profile can be computed since normalization
// factor is computed using the reads.
vector<t_profile_site*>* buffer_normalized_profile(vector<t_fragment*>* fragments, int min_i_nuc, int max_i_nuc, bool normalize = false);

double get_n_mapped_nucs(vector<t_fragment*>* fragments);

#endif // __MAPPED_READ_FILE_INTERFACE__

